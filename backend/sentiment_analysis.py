# -*- coding: utf-8 -*-
"""CryptoTweetSentimentAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c5KTeCfPExfYJVcsOL6-473GttU7g6hh
"""

!pip install pandas
!pip install numpy
!pip install datasets
!pip install tqdm
!pip install scikit-learn

# Import all Python packages required to access the Azure Open AI API.
# Import additional packages required to access datasets and create examples.

import json
import random

import pandas as pd
import numpy as np

from datasets import load_dataset
from collections import Counter
from tqdm import tqdm
from sklearn.model_selection import train_test_split
from sklearn.metrics import f1_score

df = pd.read_csv('tweets2.csv')

llama_first_turn_template = """<s>[INST]\n <<SYS>> \n {system_message} \n <</SYS>>```{user_message}``` /n [/INST] \n{assistant_message}\n</s> """
llama_examples_template = """<s>[INST]\n ```{user_message}``` \n [/INST] \n {assistant_message}\n</s>"""
llama_prediction_template = """<s>[INST]\n ```{user_message}```[/INST]"""

few_shot_prompt = """
<s>[INST]
 <<SYS>>

Classify the sentiment of tweets about small crypto coins presented in the input as 'positive' or 'negative'.
tweets will be delimited by triple backticks in the input.
Answer only 'positive' or 'negative'. Do not explain your answer.

 <</SYS>>```Just invested in $ABC Crypto and I'm already seeing some great returns! This coin is on the rise! üöÄ #Crypto #Investment #Blockchain``` /n [/INST]
positive
</s> <s>[INST]
 ```Loving the community around $XYZ Crypto! The dev team is super active and the project has huge potential. üåü #Crypto #Altcoin #Future```
 [/INST]
 positive
 </s> <s>[INST]
 ```Super excited about the new features announced for $DEF Crypto! This is definitely a game-changer. üî• #Crypto #Innovation #CryptoNews```
 [/INST]
 positive
</s><s>[INST]
 ```I'm really disappointed with $GHI Crypto. The price has been dropping non-stop, and there's no communication from the team. üò° #Crypto #Fail #Altcoin```
 [/INST]
 negative
 </s><s>[INST]
 ```Lost a lot of money on $JKL Crypto. The project seems to be going nowhere and the roadmap is unclear. üòî #Crypto #Investment #Sad```
 [/INST]
 negative
</s><s>[INST]
 ```Avoid $MNO Crypto at all costs. The recent security issues have shattered my confidence in this coin. ‚ö†Ô∏è #Crypto #Scam #Warning```
 [/INST]
 negative
</s>"""

few_shot_prompt = """
Classify the sentiment of tweets about small crypto coins presented in the input as 'positive' or 'negative'.
tweets will be delimited by triple backticks in the input.
Answer only 'positive' or 'negative'. Do not explain your answer.
"""

"""Loading LLM"""

# Installation for GPU llama-cpp-python
!CMAKE_ARGS="-DLLAMA_CUBLAS=on" FORCE_CMAKE=1 pip install llama-cpp-python --force-reinstall --upgrade --no-cache-dir --verbose

from huggingface_hub import hf_hub_download
from llama_cpp import Llama

llama_name_or_path = "TheBloke/Llama-2-13B-chat-GGUF"
llama_basename = "llama-2-13b-chat.Q5_K_M.gguf"
llama_path = hf_hub_download(
    repo_id=llama_name_or_path,
    filename=llama_basename
    )

lcpp_llm = Llama(
        model_path=llama_path,
        n_threads=2,  # CPU cores
        n_batch=512,  # Should be between 1 and n_ctx, consider the amount of VRAM in your GPU.
        n_gpu_layers=43,  # Change this value based on your model and your GPU VRAM pool.
        n_ctx=6000,  # Context window
    )

# Initialize list to store results
results = []

# Process each tweet in the DataFrame
for index, row in df.iterrows():
    tweet = row['text']
    user_input = f""" ```{tweet}``` """
    prompt = few_shot_prompt + user_input

    try:
        response = lcpp_llm(
            prompt=prompt,
            max_tokens=4,
            temperature=0,
            top_p=0.95,
            repeat_penalty=1.2,
            echo=False  # do not return the prompt
        )

        prediction = response["choices"][0]["text"].strip()
        print(prediction)
        results.append({'tweet': tweet, 'sentiment': prediction})

    except Exception as e:
        print(e)  # Log error and continue
        continue

# Convert results to DataFrame and save to CSV
results_df = pd.DataFrame(results)
results_df.to_csv('/content/sentiment_results.csv', index=False)